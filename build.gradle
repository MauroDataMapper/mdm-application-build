import io.spring.gradle.dependencymanagement.internal.DependencyManagementConfigurationContainer
import io.spring.gradle.dependencymanagement.internal.maven.MavenPomResolver
import io.spring.gradle.dependencymanagement.internal.pom.Coordinates
import io.spring.gradle.dependencymanagement.internal.pom.Pom
import io.spring.gradle.dependencymanagement.internal.pom.PomReference
import io.spring.gradle.dependencymanagement.internal.properties.MapPropertySource
import io.spring.gradle.dependencymanagement.internal.properties.ProjectPropertySource
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {url "https://mauro-repository.com/plugins-snapshot-local"}
        maven {url "https://mauro-repository.com/plugins-release-local"}
        maven { url "https://mauro-repository.com/libs-snapshot-local" }
        maven {url "https://repo.grails.org/grails/core"}
        maven {url 'https://plugins.gradle.org/m2/'}
    }
    dependencies {
        classpath "org.maurodata:mdm-gradle-plugin:$mdmGradlePluginVersion"
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:hibernate5:$grailsHibernate5Version"
        classpath "org.grails.plugins:views-gradle:$grailsViewsVersion"
    }
}

project.ext['mdmCoreVersion'] = version


apply plugin: "idea"
apply plugin: "war"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.plugins.views-json"
apply plugin: "org.grails.plugins.views-markup"

apply plugin: 'uk.ac.ox.softeng.maurodatamapper.gradle.mdm-grails'


repositories {
    mavenLocal()
    mavenCentral()
    maven {url "https://mauro-repository.com/libs-snapshot-local"}
    maven {url "https://mauro-repository.com/libs-release-local"}
    maven {url "https://repo.grails.org/grails/core"}
    maven {url "https://mauro-repository.com/libs-mirror"} // catch-all for obscure jars
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-codecs"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-datasource"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:hibernate5"
    implementation "org.hibernate:hibernate-core"
    implementation "org.grails.plugins:views-json"
    implementation "org.grails.plugins:views-json-templates"
    implementation "org.grails.plugins:views-markup"
    implementation "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    profile "org.grails.profiles:rest-api"
    runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
    testRuntimeOnly "com.h2database:h2"
    runtimeOnly "org.apache.tomcat:tomcat-jdbc"
    runtimeOnly "javax.xml.bind:jaxb-api:$jaxbApiVersion"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "io.micronaut:micronaut-http-client"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails:views-json-testing-support"
    testImplementation "org.hibernate.validator:hibernate-validator"
    testImplementation "io.micronaut:micronaut-http-client"
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx8g')
    sourceResources sourceSets.main

    System.properties.each {prop ->
        systemProperty prop.key, prop.value
    }

    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
    systemProperty 'user.dir', projectDir
}

grails {
    plugins {
        implementation "uk.ac.ox.softeng.maurodatamapper:mdm-core:$version"
        runtimeOnly "uk.ac.ox.softeng.maurodatamapper:mdm-security:$version"
        runtimeOnly "uk.ac.ox.softeng.maurodatamapper:mdm-plugin-authentication-apikey:$version"
        runtimeOnly "uk.ac.ox.softeng.maurodatamapper:mdm-plugin-authentication-basic:$version"
        runtimeOnly "uk.ac.ox.softeng.maurodatamapper:mdm-plugin-dataflow:$version"
        runtimeOnly "uk.ac.ox.softeng.maurodatamapper:mdm-plugin-datamodel:$version"
        runtimeOnly "uk.ac.ox.softeng.maurodatamapper:mdm-plugin-referencedata:$version"
        runtimeOnly "uk.ac.ox.softeng.maurodatamapper:mdm-plugin-terminology:$version"
        runtimeOnly "uk.ac.ox.softeng.maurodatamapper:mdm-plugin-profile:$version"
        runtimeOnly "uk.ac.ox.softeng.maurodatamapper:mdm-plugin-federation:$version"
    }
    if (DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
        logger.quiet('Using pathing Jar as running in Windows OS')
        pathingJar = true
    }
}

apply from: 'dependencies.gradle'

afterEvaluate {

    project.tasks.withType(Jar) {
        Map attrs = [
            "Created-By"            : "${JavaVersion.current().toString()} JVM, ${project.gradle.gradleVersion} Gradle",
            "Specification-Title"   : "$project.rootProject.name $project.name Classes",
            "Specification-Version" : project.version,
            "Implementation-Title"  : "${project.group.toLowerCase()}.${project.name.toLowerCase()}",
            "Implementation-Version": "${project.version}.dev",
            "Implementation-Vendor" : "Oxford University",
        ]
        if (project.hasProperty('mainClass'))
            attrs.'Main-Class' = project.mainClass

        manifest {
            attributes(attrs)
        }
        group 'archives'
    }
}